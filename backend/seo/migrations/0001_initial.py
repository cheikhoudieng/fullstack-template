# Generated by Django 4.2.4 on 2025-06-09 17:17

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='SEOOverride',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_date', models.DateTimeField(auto_now_add=True, help_text="Date et heure de création de l'enregistrement.", verbose_name="Date d'ajout")),
                ('last_update', models.DateTimeField(auto_now=True, help_text="Date et heure de la dernière modification de l'enregistrement.", verbose_name='Dernière mise à jour')),
                ('object_id', models.PositiveIntegerField(blank=True, db_index=True, help_text="L'identifiant unique de l'objet à cibler. Laisser vide si ciblage par URL (path).", null=True, verbose_name="ID de l'Objet")),
                ('path', models.CharField(blank=True, db_index=True, help_text="Cible une URL exacte (ex: '/connexion/', '/page/a-propos/'). Sensible à la casse et au slash final. Laisser vide si ciblage par objet.", max_length=500, null=True, unique=True, verbose_name="Chemin d'URL spécifique")),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Décocher pour désactiver cette surcharge sans la supprimer.', verbose_name='Actif')),
                ('title', models.CharField(blank=True, help_text='Idéalement ~60 caractères.', max_length=255, null=True, verbose_name='Titre SEO (Title Tag)')),
                ('meta_description', models.TextField(blank=True, help_text='Idéalement ~160 caractères.', null=True, verbose_name='Meta Description')),
                ('canonical_url', models.URLField(blank=True, help_text='Utile pour le contenu dupliqué.', max_length=2000, null=True, verbose_name='URL Canonique')),
                ('robots_meta', models.CharField(blank=True, help_text="(ex: 'noindex, nofollow', 'max-snippet:-1').", max_length=150, null=True, verbose_name='Meta Robots')),
                ('og_title', models.CharField(blank=True, help_text='Titre affiché lors du partage sur les réseaux sociaux (si vide, utilise le Titre SEO).', max_length=255, null=True, verbose_name='Titre Open Graph (og:title)')),
                ('og_description', models.TextField(blank=True, help_text='Description affichée lors du partage (si vide, utilise la Meta Description).', null=True, verbose_name='Description Open Graph (og:description)')),
                ('og_image', models.URLField(blank=True, help_text="URL absolue de l'image pour le partage. Dimensions recommandées : 1200x630px.", max_length=2000, null=True, verbose_name='Image Open Graph (og:image)')),
                ('og_type', models.CharField(blank=True, help_text="Type de contenu (ex: 'website', 'article', 'product').", max_length=50, null=True, verbose_name='Type Open Graph (og:type)')),
                ('twitter_card', models.CharField(blank=True, help_text="Type de carte ('summary', 'summary_large_image', 'app', 'player').", max_length=50, null=True, verbose_name='Type de Carte Twitter (twitter:card)')),
                ('twitter_title', models.CharField(blank=True, help_text='Titre pour la carte Twitter (si vide, utilise og:title ou Titre SEO).', max_length=255, null=True, verbose_name='Titre Carte Twitter (twitter:title)')),
                ('twitter_description', models.TextField(blank=True, help_text='Description pour la carte Twitter (si vide, utilise og:description ou Meta Description). ~200 caractères max.', null=True, verbose_name='Description Carte Twitter (twitter:description)')),
                ('twitter_image', models.URLField(blank=True, help_text="URL absolue de l'image pour Twitter (si vide, utilise og:image). Doit respecter les ratios selon le type de carte.", max_length=2000, null=True, verbose_name='Image Carte Twitter (twitter:image)')),
                ('custom_json_ld', models.JSONField(blank=True, help_text="(Avancé) Surcharge complètement le(s) script(s) JSON-LD généré(s). Entrez un objet JSON valide ou une liste d'objets JSON.", null=True, verbose_name='JSON-LD Personnalisé')),
                ('content_type', models.ForeignKey(blank=True, help_text='Le type de modèle à cibler (ex: Produit, Catégorie). Laisser vide si ciblage par URL (path).', null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype', verbose_name='Type de Contenu')),
            ],
            options={
                'verbose_name': 'Surcharge SEO',
                'verbose_name_plural': 'Surcharges SEO',
                'ordering': ['-is_active', '-last_update'],
            },
        ),
        migrations.AddConstraint(
            model_name='seooverride',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('content_type__isnull', False), ('object_id__isnull', False), ('path__isnull', True)), models.Q(('content_type__isnull', True), ('object_id__isnull', True), ('path__isnull', False)), _connector='OR'), name='seo_target_exclusive', violation_error_message="Une surcharge SEO doit cibler soit un objet (Type/ID) soit un chemin d'URL (Path), mais pas les deux."),
        ),
        migrations.AlterUniqueTogether(
            name='seooverride',
            unique_together={('content_type', 'object_id')},
        ),
    ]
